{"version":3,"sources":["../src/actions/getInference.ts","../src/providers/topics.ts","../src/templates/index.ts","../src/index.ts"],"sourcesContent":["import {\n    type ActionExample,\n    composeContext,\n    elizaLogger,\n    generateObject,\n    type HandlerCallback,\n    type IAgentRuntime,\n    type Memory,\n    ModelClass,\n    type State,\n    type Action,\n} from \"@elizaos/core\";\nimport { z } from \"zod\";\nimport { topicsProvider } from \"../providers/topics\";\nimport { getInferenceTemplate } from \"../templates\";\nimport { AlloraAPIClient, type ChainSlug } from \"@alloralabs/allora-sdk\";\n\ninterface InferenceFields {\n    topicId: number | null;\n    topicName: string | null;\n}\n\nexport const getInferenceAction: Action = {\n    name: \"GET_INFERENCE\",\n    similes: [\n        \"GET_ALLORA_INFERENCE\",\n        \"GET_TOPIC_INFERENCE\",\n        \"ALLORA_INFERENCE\",\n        \"TOPIC_INFERENCE\",\n    ],\n    validate: async (_runtime: IAgentRuntime, _message: Memory) => {\n        return true;\n    },\n    description: \"Get inference from Allora Network\",\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: { [key: string]: unknown },\n        callback: HandlerCallback\n    ): Promise<boolean> => {\n        // Initialize or update state\n        let currentState = state;\n        if (!currentState) {\n            currentState = (await runtime.composeState(message)) as State;\n        } else {\n            currentState = await runtime.updateRecentMessageState(currentState);\n        }\n\n        // Get Allora topics information from the provider\n        currentState.alloraTopics = await topicsProvider.get(runtime, message, currentState);\n\n        // Compose context for extracting the inference fields\n        const inferenceTopicContext = composeContext({\n            state: currentState,\n            template: getInferenceTemplate,\n        });\n\n        // Define the schema for extracting the inference fields\n        const schema = z.object({\n            topicId: z.number().nullable(),\n            topicName: z.string().nullable(),\n        });\n\n        const results = await generateObject({\n            runtime,\n            context: inferenceTopicContext,\n            modelClass: ModelClass.SMALL,\n            schema,\n        });\n        const inferenceFields = results.object as InferenceFields;\n\n        if (!inferenceFields.topicId || !inferenceFields.topicName) {\n            callback({\n                text: \"There is no active Allora Network topic that matches your request.\",\n            });\n            return false;\n        }\n\n        elizaLogger.info(\n            `Retrieving inference for topic ID: ${inferenceFields.topicId}`\n        );\n\n        try {\n            // Get inference from Allora API\n            const alloraApiClient = new AlloraAPIClient({\n                chainSlug: runtime.getSetting(\"ALLORA_CHAIN_SLUG\") as ChainSlug,\n                apiKey: runtime.getSetting(\"ALLORA_API_KEY\") as string,\n            });\n\n            const inferenceRes = await alloraApiClient.getInferenceByTopicID(\n                inferenceFields.topicId\n            );\n            const inferenceValue =\n                inferenceRes.inference_data.network_inference_normalized;\n\n            callback({\n                text: `Inference provided by Allora Network on topic ${inferenceFields.topicName} (Topic ID: ${inferenceFields.topicId}): ${inferenceValue}`,\n            });\n            return true;\n        } catch (error) {\n            const errorMessage =\n                error instanceof Error ? error.message : String(error);\n            const displayMessage = `There was an error fetching the inference from Allora Network: ${errorMessage}`;\n\n            elizaLogger.error(displayMessage);\n            callback({\n                text: displayMessage,\n            });\n            return false;\n        }\n    },\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"What is the predicted ETH price in 5 minutes?\",\n                },\n            },\n            {\n                user: \"{{user2}}\",\n                content: {\n                    text: \"I'll get the inference now...\",\n                    action: \"GET_INFERENCE\",\n                },\n            },\n            {\n                user: \"{{user2}}\",\n                content: {\n                    text: \"Inference provided by Allora Network on topic ETH 5min (ID: 13): 3393.364326646801085508\",\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"What is the predicted price of gold in 24 hours?\",\n                },\n            },\n            {\n                user: \"{{user2}}\",\n                content: {\n                    text: \"I'll get the inference now...\",\n                    action: \"GET_INFERENCE\",\n                },\n            },\n            {\n                user: \"{{user2}}\",\n                content: {\n                    text: \"There is no active Allora Network topic that matches your request.\",\n                },\n            },\n        ],\n    ] as ActionExample[][],\n} as Action;\n","import {\n    elizaLogger,\n    type IAgentRuntime,\n    type Memory,\n    type Provider,\n    type State,\n} from \"@elizaos/core\";\nimport NodeCache from \"node-cache\";\nimport { AlloraAPIClient, type AlloraTopic, type ChainSlug } from \"@alloralabs/allora-sdk\";\n\nexport class TopicsProvider implements Provider {\n    private cache: NodeCache;\n\n    constructor() {\n        this.cache = new NodeCache({ stdTTL: 30 * 60 }); // Cache TTL set to 30 minutes\n    }\n\n    async get(\n        runtime: IAgentRuntime,\n        _message: Memory,\n        _state?: State\n    ): Promise<string | null> {\n        const alloraTopics = await this.getAlloraTopics(runtime);\n\n        // Format the topics into a string to be added to the prompt context\n        let output = 'Allora Network Topics: \\n';\n        for (const topic of alloraTopics) {\n            output += `Topic Name: ${topic.topic_name}\\n`;\n            output += `Topic Description: ${topic.description}\\n`;\n            output += `Topic ID: ${topic.topic_id}\\n`;\n            output += `Topic is Active: ${topic.is_active}\\n`;\n            output += `Topic Updated At: ${topic.updated_at}\\n`;\n            output += '\\n';\n        }\n\n        return output;\n    }\n\n    private async getAlloraTopics(\n        runtime: IAgentRuntime\n    ): Promise<AlloraTopic[]> {\n        const cacheKey = \"allora-topics\";\n        const cachedValue = this.cache.get<AlloraTopic[]>(cacheKey);\n\n        // If the topics are aready cached, return them\n        if (cachedValue) {\n            elizaLogger.info(\"Retrieving Allora topics from cache\");\n            return cachedValue;\n        }\n\n        // If the topics are not cached, retrieve them from the Allora API\n        const alloraApiKey = runtime.getSetting(\"ALLORA_API_KEY\");\n        const alloraChainSlug = runtime.getSetting(\"ALLORA_CHAIN_SLUG\");\n\n        const alloraApiClient = new AlloraAPIClient({\n            chainSlug: alloraChainSlug as ChainSlug,\n            apiKey: alloraApiKey as string,\n        });\n        const alloraTopics = await alloraApiClient.getAllTopics();\n\n        // Cache the retrieved topics\n        this.cache.set(cacheKey, alloraTopics);\n\n        return alloraTopics;\n    }\n}\n\nexport const topicsProvider = new TopicsProvider();\n","export const getInferenceTemplate = `Respond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined.\nExample response:\n\\`\\`\\`json\n{\n    \"topicId\": 1,\n    \"topicName\": \"Topic Name\",\n}\n\\`\\`\\`\n\nRecent messages:\n{{recentMessages}}\n\nAllora Network Topics:\n{{alloraTopics}}\n\nGiven the recent messages and the Allora Network Topics above, extract the following information about the requested:\n- Topic ID of the topic that best matches the user's request. The topic should be active, otherwise return null.\n- Topic Name of the topic that best matches the user's request. The topic should be active, otherwise return null.\n\nIf the topic is not active or the inference timeframe is not matching the user's request, return null for both topicId and topicName.\n\nRespond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined. The result should be a valid JSON object with the following schema:\n\\`\\`\\`json\n{\n    \"topicId\": number | null,\n    \"topicName\": string | null,\n}\n\\`\\`\\``;\n","import { getInferenceAction } from \"./actions/getInference\";\nimport { topicsProvider } from \"./providers/topics\";\n\nexport const alloraPlugin = {\n    name: \"Allora Network plugin\",\n    description: \"Allora Network plugin for Eliza\",\n    actions: [getInferenceAction as any],\n    evaluators: [],\n    providers: [topicsProvider as any],\n};\n"],"mappings":"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","names":["elizaLogger","AlloraAPIClient","elizaLogger"]}