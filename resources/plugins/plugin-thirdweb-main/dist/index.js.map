{"version":3,"sources":["../src/actions/chat.ts","../src/actions/index.ts","../src/index.ts"],"sourcesContent":["import {\n    elizaLogger,\n    type HandlerCallback,\n    type IAgentRuntime,\n    type Memory,\n    type State,\n    type Action,\n} from \"@elizaos/core\";\n\nconst BASE_URL = \"https://nebula-api.thirdweb.com\";\n\n// If chat is a stream, wait for stream to complete before returning response\nasync function handleStreamResponse(\n    response: Response\n): Promise<ReadableStream> {\n    elizaLogger.log(\"Starting stream response handling\");\n    const reader = response.body?.getReader();\n    if (!reader) {\n        elizaLogger.error(\"No readable stream available\");\n        throw new Error(\"No readable stream available\");\n    }\n\n    return new ReadableStream({\n        async start(controller) {\n            try {\n                while (true) {\n                    const { done, value } = await reader.read();\n                    if (done) {\n                        elizaLogger.log(\"Stream reading completed\");\n                        break;\n                    }\n\n                    const events = new TextDecoder()\n                        .decode(value)\n                        .split(\"\\n\\n\");\n                    elizaLogger.debug(\n                        `Processing ${events.length} stream events`\n                    );\n                    for (const event of events) {\n                        if (!event.trim()) continue;\n                        controller.enqueue(event);\n                    }\n                }\n            } finally {\n                reader.releaseLock();\n                controller.close();\n                elizaLogger.log(\"Stream controller closed\");\n            }\n        },\n    });\n}\n\n// Process & return a response to the current message with thirdweb Nebula\nexport const blockchainChatAction: Action = {\n    name: \"BLOCKCHAIN_CHAT\",\n    similes: [\n        \"QUERY_BLOCKCHAIN\",\n        \"CHECK_BLOCKCHAIN\",\n        \"BLOCKCHAIN_SEARCH\",\n        \"CRYPTO_LOOKUP\",\n        \"WEB3_SEARCH\",\n        \"BLOCKCHAIN_HISTORY_EXPLORER\",\n        \"UNIVERSAL_BLOCKCHAIN_TRANSALTOR\",\n        \"BLOCKCHAIN_DATA_PROVIDER\",\n        \"HISTORICAL_BLOCKCHAIN_DATA\",\n        \"TRACK_BLOCKCHAIN_TRANSACTIONS\",\n        \"BLOCKCHAIN_INTERPRETER\",\n        \"BLOCKCHAIN_TRANSACTION_DETAILS\",\n    ],\n    validate: async (\n        runtime: IAgentRuntime,\n        _message: Memory\n    ): Promise<boolean> => {\n        const secretKey =\n            runtime.getSetting(\"THIRDWEB_SECRET_KEY\") ??\n            process.env.THIRDWEB_SECRET_KEY;\n        return Boolean(secretKey);\n    },\n    description:\n        \"Query blockchain data and execute transactions through natural language interaction with the Nebula API\",\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        _state: State,\n        _options: Record<string, unknown>,  // Replaced any with Record<string, unknown>\n        callback: HandlerCallback\n    ): Promise<Record<string, unknown> | ReadableStream> => { \n        try {\n            elizaLogger.log(\"Starting blockchain chat handler\");\n            const secretKey =\n                runtime.getSetting(\"THIRDWEB_SECRET_KEY\") ??\n                process.env.THIRDWEB_SECRET_KEY;\n\n            if (!secretKey) {\n                elizaLogger.error(\"THIRDWEB_SECRET_KEY not configured\");\n                throw new Error(\"THIRDWEB_SECRET_KEY is not configured\");\n            }\n\n            const request = {\n                message: message.content.text,\n                stream: false,\n            };\n\n            elizaLogger.log(\"NEBULA CHAT REQUEST: \", request);\n\n            elizaLogger.debug(\"Sending request to Nebula API\");\n            const response = await fetch(`${BASE_URL}/chat`, {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    \"x-secret-key\": secretKey,\n                },\n                body: JSON.stringify(request),\n            });\n            elizaLogger.debug(\"Received response from Nebula API\");\n\n            if (!request.stream) {\n                const text = await response.text();\n                elizaLogger.debug(\"Raw response text:\", text);\n\n                try {\n                    const cleanedText = text.trim().split(\"\\n\").pop() || text;\n                    const parsed = JSON.parse(cleanedText);\n                    elizaLogger.log(\"Successfully parsed response:\", parsed);\n\n                    console.log(parsed.message);\n\n                    await callback({ text: parsed.message });\n\n                    return parsed;\n                } catch (parseError) {\n                    elizaLogger.error(\"Parse error details:\", parseError);\n                    elizaLogger.error(\n                        \"Failed to parse JSON response. Raw text:\",\n                        text\n                    );\n                    return { text: text };\n                }\n            }\n\n            elizaLogger.log(\"Handling streaming response\");\n            return handleStreamResponse(response);\n        } catch (error) {\n            elizaLogger.error(\"Blockchain chat failed:\", error);\n            throw new Error(`Blockchain chat failed: ${error.message}`);\n        }\n    },\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"What's the ETH balance of vitalik.eth?\",\n                    action: \"BLOCKCHAIN_CHAT\",\n                },\n            },\n            {\n                user: \"{{user2}}\",\n                content: {\n                    text: \"The current ETH balance of vitalik.eth (0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045) is 1,123.45 ETH\",\n                    action: \"BLOCKCHAIN_CHAT\",\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"send 0.1 ETH to 0x742d35Cc6634C0532925a3b844Bc454e4438f44e\",\n                    action: \"BLOCKCHAIN_CHAT\",\n                },\n            },\n            {\n                user: \"{{user2}}\",\n                content: {\n                    text: \"I'll help you send 0.1 ETH. Please review and sign the transaction.\",\n                    action: \"BLOCKCHAIN_CHAT\",\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Show me the floor price of BAYC\",\n                    action: \"BLOCKCHAIN_CHAT\",\n                },\n            },\n            {\n                user: \"{{user2}}\",\n                content: {\n                    text: \"The current floor price for BAYC is 32.5 ETH with 3 sales in the last 24h\",\n                    action: \"BLOCKCHAIN_CHAT\",\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Show me my recent transactions\",\n                    action: \"BLOCKCHAIN_CHAT\",\n                },\n            },\n            {\n                user: \"{{user2}}\",\n                content: {\n                    text: \"Here are your recent transactions: 1. Sent 1.5 ETH 2. Swapped tokens on Uniswap 3. Received 0.5 ETH\",\n                    action: \"BLOCKCHAIN_CHAT\",\n                },\n            },\n        ],\n    ],\n} as Action;\n","export * from \"./chat.ts\";\n","import type { Plugin } from \"@elizaos/core\";\nimport { blockchainChatAction } from \"./actions/chat\";\nexport * as actions from \"./actions/index.ts\";\n\nexport const thirdwebPlugin: Plugin = {\n    name: \"PROVIDE_BLOCKCHAIN_DATA\",\n    description:\n        \"Search the blockchain with thirdweb Nebula for information about wallet addresses, token prices, token owners, transactions and their details.\",\n    actions: [blockchainChatAction],\n    evaluators: [],\n    providers: [],\n};\n"],"mappings":"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","names":[]}