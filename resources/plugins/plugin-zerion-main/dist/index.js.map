{"version":3,"sources":["../src/constants.ts","../src/providers/index.ts","../src/utils.ts","../src/actions/getWalletPortfolio/examples.ts","../src/actions/getWalletPortfolio/index.ts","../src/actions/getWalletPositions/examples.ts","../src/actions/getWalletPositions/index.ts","../src/index.ts"],"sourcesContent":["export const ZERION_V1_BASE_URL = \"https://api.zerion.io/v1\";","import { IAgentRuntime, Memory, Provider, State } from \"@elizaos/core\";\nimport { ZERION_V1_BASE_URL } from \"../constants.ts\";\nimport { PortfolioData, PositionData, ZerionPortfolioResponse, ZerionPositionResponse, ZerionProviderResponse } from \"../types.ts\";\n\ninterface ZerionProvider extends Provider {\n    getPositions(runtime: IAgentRuntime, message: Memory): Promise<ZerionProviderResponse>;\n    get(runtime: IAgentRuntime, message: Memory, state?: State): Promise<ZerionProviderResponse>;\n}\n\nexport const zerionProvider: ZerionProvider = {\n    get: async (_runtime: IAgentRuntime, message: Memory, _state?: State): Promise<ZerionProviderResponse> => {\n        try {\n            if (!process.env.ZERION_API_KEY) {\n                throw new Error(\"Zerion API key not found in environment variables. Make sure to set the ZERION_API_KEY environment variable.\");\n            }\n            const content = message.content as { text: string };\n            const addressMatch = content.text.match(/0x[a-fA-F0-9]{40}/);\n            if (!addressMatch) {\n                throw new Error(\"Valid ethereum address not found in message\");\n            }\n            const address = addressMatch[0];\n            const baseUrl = ZERION_V1_BASE_URL;\n\n            const response = await fetch(`${baseUrl}/wallets/${address}/portfolio`, {\n                method: \"GET\",\n                headers: {\n                    \"Accept\": \"application/json\",\n                    \"Authorization\": `Basic ${process.env.ZERION_API_KEY}`\n                }\n            });\n\n\n            if (!response.ok) {\n                throw new Error(`Failed to fetch portfolio: ${response.statusText}`);\n            }\n\n            const apiResponse: ZerionPortfolioResponse = await response.json();\n            const { attributes } = apiResponse.data;\n\n            const portfolioData: PortfolioData = {\n                totalValue: attributes.total.positions,\n                chainDistribution: attributes.positions_distribution_by_chain,\n                positionTypes: attributes.positions_distribution_by_type,\n                changes: {\n                    absolute_1d: attributes.changes.absolute_1d,\n                    percent_1d: attributes.changes.percent_1d\n                }\n            };\n\n            return { success: true, data: portfolioData };\n\n        } catch (error) {\n            console.log(\"error fetching portfolio\", error);\n            return { success: false, error: error instanceof Error ? error.message : \"Failed to fetch portfolio data from zerion\" };\n        }\n\n    },\n\n    getPositions: async (_runtime: IAgentRuntime, message: Memory): Promise<ZerionProviderResponse> => {\n        const addressMatch = message.content.text.match(/0x[a-fA-F0-9]{40}/);\n        if (!addressMatch) {\n            return {\n                success: false,\n                error: \"No valid address found in message\"\n            };\n        }\n\n        const address = addressMatch[0];\n        const response = await fetch(`https://api.zerion.io/v1/wallets/${address}/positions?filter[positions]=only_simple&currency=usd&filter[trash]=only_non_trash&sort=value`, {\n            headers: {\n                \"Accept\": \"application/json\",\n                \"Authorization\": `Basic ${process.env.ZERION_API_KEY}`\n            }\n        });\n        const data = await response.json() as ZerionPositionResponse;\n\n        let totalValue = 0;\n        const positions = data.data.map(position => {\n            const value = position.attributes.value || 0;\n            totalValue += value;\n\n            return {\n                name: position.attributes.fungible_info.name,\n                symbol: position.attributes.fungible_info.symbol,\n                quantity: position.attributes.quantity.float,\n                value: position.attributes.value,\n                price: position.attributes.price,\n                chain: position.relationships.chain.data.id,\n                change24h: position.attributes.changes?.percent_1d || null,\n                verified: position.attributes.fungible_info.flags.verified\n            };\n        });\n\n        return {\n            success: true,\n            data: {\n                positions,\n                totalValue\n            } as PositionData\n        };\n    }\n}","import { PortfolioData, PositionData } from \"./types\";\n\nexport const formatPortfolioData = (data: PortfolioData) => {\n    return `Total Value of the portfolio is $${data.totalValue.toFixed(2)}. In 24 hours the portfolio has changed by (${data.changes.percent_1d}%).`;\n}\n\nexport const formatPositionsData = (data: PositionData) => {\n    let response = `Total Portfolio Value: $${data.totalValue.toFixed(2)}\\n\\nToken Positions:\\n`;\n\n    // Sort positions by value (descending), putting null values at the end\n    const sortedPositions = [...data.positions].sort((a, b) => {\n        if (a.value === null && b.value === null) return 0;\n        if (a.value === null) return 1;\n        if (b.value === null) return -1;\n        return b.value - a.value;\n    });\n\n    for (const position of sortedPositions) {\n        const valueStr = position.value !== null ? `$${position.value.toFixed(2)}` : 'N/A';\n        const change24hStr = position.change24h !== null ? `${position.change24h.toFixed(2)}%` : 'N/A';\n\n        response += `${position.name} Value: ${valueStr} 24h Change: ${change24hStr}\\n`;\n    }\n\n    return response;\n}","export default [\n    [\n        {\n            user: \"{{user1}}\",\n            content: {\n                text: \"check the wallet balance of: {{address}}\",\n            },\n        },\n        {\n            user: \"{{agentName}}\",\n            content: {\n                text: \"Total Value of the portfolio is $5000\",\n                action: \"getwallet_portfolio\",\n            },\n        },\n    ],\n    [\n        {\n            user: \"{{user1}}\",\n            content: {\n                text: \"what's the balance for {{address}}\",\n            },\n        },\n        {\n            user: \"{{agentName}}\",\n            content: {\n                text: \"I will fetch the portfolio for {{address}}\",\n                action: \"getwallet_portfolio\",\n            },\n        },\n        {\n            user: \"{{agentName}}\",\n            content: {\n                text: \"Total Value of the portfolio is $40248.64\",\n            },\n        },\n    ],\n];","import { Action, HandlerCallback, IAgentRuntime, Memory, State } from \"@elizaos/core\";\nimport { zerionProvider } from \"../../providers/index.ts\";\nimport { formatPortfolioData } from \"../../utils.ts\";\nimport { PortfolioData, PositionData } from \"../../types.ts\";\nimport examples from \"./examples.ts\";\n\n\n\nexport const getWalletPortfolio: Action = {\n    name: \"getwallet_portfolio\",\n    description: \"Fetch a wallet's portfolio data from Zerion for an address\",\n    similes: [\n        \"getwallet_portfolio\",\n        \"displayportfolio\",\n        \"getwallet_holdings\",\n        \"getwallet_balance\",\n        \"getwallet_value\",\n        \"get_portfolio_value\",\n        \"get wallet portfolio\",\n        \"get wallet holdings\",\n        \"get wallet balance\",\n        \"get wallet value\",\n    ],\n    examples: examples,\n    validate: async (_runtime: IAgentRuntime, message: Memory) => {\n\n        const addressRegex = /0x[a-fA-F0-9]{40}/;\n        return addressRegex.test(message.content.text);\n    },\n    handler: async (runtime: IAgentRuntime, message: Memory, _state?: State, _options?: { [key: string]: unknown; }, callback?: HandlerCallback): Promise<boolean> => {\n        console.log(\"inside handler of zerion\");\n        const response = await zerionProvider.get(runtime, message);\n        console.log(\"ZERION portfolioAPI response: \", response);\n        if (!response.success || !response.data) {\n            return false;\n        }\n\n        console.log(\"ZERION API response: \", response);\n\n        // Add type guard to ensure we have PortfolioData\n        if (!isPortfolioData(response.data)) {\n            return false;\n        }\n\n        // format response into a message string;\n        const formattedResponse = formatPortfolioData(response.data);\n\n        if (callback) {\n            console.log(\"sending response to callback\");\n            callback({\n                text: formattedResponse,\n                content: {\n                    ...response.data\n                }\n            })\n        }\n        return true;\n    }\n}\n\n// Add type guard function\nfunction isPortfolioData(data: PortfolioData | PositionData): data is PortfolioData {\n    return (\n        'chainDistribution' in data &&\n        'positionTypes' in data &&\n        'changes' in data\n    );\n}","export default [\n    [\n        {\n            user: \"{{user1}}\",\n            content: {\n                text: \"Show me the tokens in wallet 0x687fb7a442973c53674ac65bfcaf287860ba6db3\",\n            },\n        },\n        {\n            user: \"{{agentName}}\",\n            content: {\n                text: \"I'll fetch the token positions for wallet 0x687fb7a442973c53674ac65bfcaf287860ba6db3\",\n                action: \"getwallet_positions\",\n            },\n        },\n    ],\n    [\n        {\n            user: \"{{user1}}\",\n            content: {\n                text: \"What tokens does 0x687fb7a442973c53674ac65bfcaf287860ba6db3 hold?\",\n            },\n        },\n        {\n            user: \"{{agentName}}\",\n            content: {\n                text: \"I'll check what tokens are held in wallet 0x687fb7a442973c53674ac65bfcaf287860ba6db3\",\n                action: \"getwallet_positions\",\n            },\n        },\n        {\n            user: \"{{agentName}}\",\n            content: {\n                text: \"Total Portfolio Value: $40248.64\\n\\nToken Positions:\\n\",\n            },\n        },\n    ],\n    [\n        {\n            user: \"{{user1}}\",\n            content: {\n                text: \"List the positions for 0x687fb7a442973c53674ac65bfcaf287860ba6db3\",\n            },\n        },\n        {\n            user: \"{{agentName}}\",\n            content: {\n                text: \"I'll get all token positions for wallet 0x687fb7a442973c53674ac65bfcaf287860ba6db3\",\n                action: \"getwallet_positions\",\n            },\n        },\n    ],\n]; ","import { Action, HandlerCallback, IAgentRuntime, Memory, State } from \"@elizaos/core\";\nimport { zerionProvider } from \"../../providers/index.ts\";\nimport { PositionData } from \"../../types.ts\";\nimport { formatPositionsData } from \"../../utils.ts\";\nimport examples from \"./examples.ts\";\n\nexport const getWalletPositions: Action = {\n    name: \"getwallet_positions\",\n    description: \"Fetch a wallet's token positions from Zerion for an address\",\n    examples,\n    similes: [\n        \"getwallet_positions\",\n        \"displaypositions\",\n        \"getwallet_tokens\",\n        \"get_token_positions\",\n        \"get wallet positions\",\n        \"get wallet tokens\",\n        \"get token positions\",\n        \"list tokens\",\n    ],\n    validate: async (_runtime: IAgentRuntime, message: Memory) => {\n        const addressRegex = /0x[a-fA-F0-9]{40}/;\n        return addressRegex.test(message.content.text);\n    },\n    handler: async (runtime: IAgentRuntime, message: Memory, _state?: State, _options?: { [key: string]: unknown; }, callback?: HandlerCallback): Promise<boolean> => {\n\n        const response = await zerionProvider.getPositions(runtime, message);\n        console.log(\"ZERION positions API response: \", response);\n        if (!response.success || !response.data) {\n            return false;\n        }\n\n        console.log(\"ZERION API response: \", response);\n\n        // format response into a message string;\n        const formattedResponse = formatPositionsData(response.data as PositionData);\n\n        if (callback) {\n            console.log(\"sending response to callback\");\n            callback({\n                text: formattedResponse,\n                content: {\n                    ...response.data\n                }\n            })\n        }\n        return true;\n    }\n}","import { Plugin } from \"@elizaos/core\";\nimport { getWalletPortfolio } from \"./actions/getWalletPortfolio/index.ts\";\nimport { getWalletPositions } from \"./actions/getWalletPositions/index.ts\";\nconst zerionPlugin: Plugin = {\n    name: \"zerion\",\n    description: \"Plugin for interacting with zerion API to fetch wallet portfolio data\",\n    actions: [getWalletPortfolio, getWalletPositions] // implement actions and use them here\n\n};\n\nexport { zerionPlugin };\n\n"],"mappings":"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","names":["examples_default","examples_default"]}