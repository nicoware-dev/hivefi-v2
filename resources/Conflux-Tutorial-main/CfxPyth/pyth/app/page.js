'use client'

import { useState } from 'react';
import { ethers } from 'ethers';
import { EvmPriceServiceConnection } from "@pythnetwork/pyth-evm-js";
// import ABI from "../SmartContract/artifacts/contracts/price.sol/CFXPrice.json"

const ABI = 
  {
    "_format": "hh-sol-artifact-1",
    "contractName": "CFXPrice",
    "sourceName": "contracts/price.sol",
    "abi": [
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "pythContract",
            "type": "address"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "constructor"
      },
      {
        "inputs": [
          {
            "internalType": "bytes[]",
            "name": "priceUpdateData",
            "type": "bytes[]"
          }
        ],
        "name": "getCFXPrice",
        "outputs": [
          {
            "internalType": "int64",
            "name": "",
            "type": "int64"
          },
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "payable",
        "type": "function"
      }
    ],
    "bytecode": "0x608060405234801561001057600080fd5b50604051610932380380610932833981810160405281019061003291906100db565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610108565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100a88261007d565b9050919050565b6100b88161009d565b81146100c357600080fd5b50565b6000815190506100d5816100af565b92915050565b6000602082840312156100f1576100f0610078565b5b60006100ff848285016100c6565b91505092915050565b61081b806101176000396000f3fe60806040526004361061001e5760003560e01c806347c66c5f14610023575b600080fd5b61003d600480360381019061003891906102e8565b610054565b60405161004b92919061036a565b60405180910390f35b60008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d47eed4586866040518363ffffffff1660e01b81526004016100b5929190610517565b602060405180830381865afa1580156100d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100f69190610567565b905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ef9e5e288287876040518463ffffffff1660e01b8152600401610154929190610517565b6000604051808303818588803b15801561016d57600080fd5b505af1158015610181573d6000803e3d6000fd5b505050505060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a4ae35e07f8879170230c9603342f3837cf9a8e76c61791198fb1271bb2552c9af7b33c93360001b603c6040518363ffffffff1660e01b81526004016102089291906105f2565b608060405180830381865afa158015610225573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061024991906107b8565b9050806000015181602001518067ffffffffffffffff1690509350935050509250929050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f8401126102a8576102a7610283565b5b8235905067ffffffffffffffff8111156102c5576102c4610288565b5b6020830191508360208202830111156102e1576102e061028d565b5b9250929050565b600080602083850312156102ff576102fe610279565b5b600083013567ffffffffffffffff81111561031d5761031c61027e565b5b61032985828601610292565b92509250509250929050565b60008160070b9050919050565b61034b81610335565b82525050565b6000819050919050565b61036481610351565b82525050565b600060408201905061037f6000830185610342565b61038c602083018461035b565b9392505050565b600082825260208201905092915050565b6000819050919050565b600082825260208201905092915050565b82818337600083830152505050565b6000601f19601f8301169050919050565b60006103eb83856103ae565b93506103f88385846103bf565b610401836103ce565b840190509392505050565b60006104198484846103df565b90509392505050565b600080fd5b600080fd5b600080fd5b6000808335600160200384360303811261044e5761044d61042c565b5b83810192508235915060208301925067ffffffffffffffff82111561047657610475610422565b5b60018202360383131561048c5761048b610427565b5b509250929050565b6000602082019050919050565b60006104ad8385610393565b9350836020840285016104bf846103a4565b8060005b878110156105055784840389526104da8284610431565b6104e586828461040c565b95506104f084610494565b935060208b019a5050506001810190506104c3565b50829750879450505050509392505050565b600060208201905081810360008301526105328184866104a1565b90509392505050565b61054481610351565b811461054f57600080fd5b50565b6000815190506105618161053b565b92915050565b60006020828403121561057d5761057c610279565b5b600061058b84828501610552565b91505092915050565b6000819050919050565b6105a781610594565b82525050565b6000819050919050565b6000819050919050565b60006105dc6105d76105d2846105ad565b6105b7565b610351565b9050919050565b6105ec816105c1565b82525050565b6000604082019050610607600083018561059e565b61061460208301846105e3565b9392505050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610658826103ce565b810181811067ffffffffffffffff8211171561067757610676610620565b5b80604052505050565b600061068a61026f565b9050610696828261064f565b919050565b6106a481610335565b81146106af57600080fd5b50565b6000815190506106c18161069b565b92915050565b600067ffffffffffffffff82169050919050565b6106e4816106c7565b81146106ef57600080fd5b50565b600081519050610701816106db565b92915050565b60008160030b9050919050565b61071d81610707565b811461072857600080fd5b50565b60008151905061073a81610714565b92915050565b6000608082840312156107565761075561061b565b5b6107606080610680565b90506000610770848285016106b2565b6000830152506020610784848285016106f2565b60208301525060406107988482850161072b565b60408301525060606107ac84828501610552565b60608301525092915050565b6000608082840312156107ce576107cd610279565b5b60006107dc84828501610740565b9150509291505056fea2646970667358221220975aeddfc198436eb82e5c9b29a342f2902bc85a4c73e4b8a3d029c37300607564736f6c63430008180033",
    "deployedBytecode": "0x60806040526004361061001e5760003560e01c806347c66c5f14610023575b600080fd5b61003d600480360381019061003891906102e8565b610054565b60405161004b92919061036a565b60405180910390f35b60008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d47eed4586866040518363ffffffff1660e01b81526004016100b5929190610517565b602060405180830381865afa1580156100d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100f69190610567565b905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ef9e5e288287876040518463ffffffff1660e01b8152600401610154929190610517565b6000604051808303818588803b15801561016d57600080fd5b505af1158015610181573d6000803e3d6000fd5b505050505060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a4ae35e07f8879170230c9603342f3837cf9a8e76c61791198fb1271bb2552c9af7b33c93360001b603c6040518363ffffffff1660e01b81526004016102089291906105f2565b608060405180830381865afa158015610225573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061024991906107b8565b9050806000015181602001518067ffffffffffffffff1690509350935050509250929050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f8401126102a8576102a7610283565b5b8235905067ffffffffffffffff8111156102c5576102c4610288565b5b6020830191508360208202830111156102e1576102e061028d565b5b9250929050565b600080602083850312156102ff576102fe610279565b5b600083013567ffffffffffffffff81111561031d5761031c61027e565b5b61032985828601610292565b92509250509250929050565b60008160070b9050919050565b61034b81610335565b82525050565b6000819050919050565b61036481610351565b82525050565b600060408201905061037f6000830185610342565b61038c602083018461035b565b9392505050565b600082825260208201905092915050565b6000819050919050565b600082825260208201905092915050565b82818337600083830152505050565b6000601f19601f8301169050919050565b60006103eb83856103ae565b93506103f88385846103bf565b610401836103ce565b840190509392505050565b60006104198484846103df565b90509392505050565b600080fd5b600080fd5b600080fd5b6000808335600160200384360303811261044e5761044d61042c565b5b83810192508235915060208301925067ffffffffffffffff82111561047657610475610422565b5b60018202360383131561048c5761048b610427565b5b509250929050565b6000602082019050919050565b60006104ad8385610393565b9350836020840285016104bf846103a4565b8060005b878110156105055784840389526104da8284610431565b6104e586828461040c565b95506104f084610494565b935060208b019a5050506001810190506104c3565b50829750879450505050509392505050565b600060208201905081810360008301526105328184866104a1565b90509392505050565b61054481610351565b811461054f57600080fd5b50565b6000815190506105618161053b565b92915050565b60006020828403121561057d5761057c610279565b5b600061058b84828501610552565b91505092915050565b6000819050919050565b6105a781610594565b82525050565b6000819050919050565b6000819050919050565b60006105dc6105d76105d2846105ad565b6105b7565b610351565b9050919050565b6105ec816105c1565b82525050565b6000604082019050610607600083018561059e565b61061460208301846105e3565b9392505050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610658826103ce565b810181811067ffffffffffffffff8211171561067757610676610620565b5b80604052505050565b600061068a61026f565b9050610696828261064f565b919050565b6106a481610335565b81146106af57600080fd5b50565b6000815190506106c18161069b565b92915050565b600067ffffffffffffffff82169050919050565b6106e4816106c7565b81146106ef57600080fd5b50565b600081519050610701816106db565b92915050565b60008160030b9050919050565b61071d81610707565b811461072857600080fd5b50565b60008151905061073a81610714565b92915050565b6000608082840312156107565761075561061b565b5b6107606080610680565b90506000610770848285016106b2565b6000830152506020610784848285016106f2565b60208301525060406107988482850161072b565b60408301525060606107ac84828501610552565b60608301525092915050565b6000608082840312156107ce576107cd610279565b5b60006107dc84828501610740565b9150509291505056fea2646970667358221220975aeddfc198436eb82e5c9b29a342f2902bc85a4c73e4b8a3d029c37300607564736f6c63430008180033",
    "linkReferences": {},
    "deployedLinkReferences": {}
  }



export default function Home() {
  const [price, setPrice] = useState(null);
  const [txHash, setTxHash] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const fetchCFXPrice = async () => {
    setLoading(true);
    setError(null);
    try {
      const provider = new ethers.providers.Web3Provider(window.ethereum);
      const signer = provider.getSigner();
      
      const CFXPrice = new ethers.Contract(
        "0x6c5E9F5bFe1399bd0Fe92066347A3a5c2A30A315",
        ABI.abi,
        signer
      );

      const connection = new EvmPriceServiceConnection(
        "https://hermes.pyth.network"
      );

      const priceIds = [
        "0x8879170230c9603342f3837cf9a8e76c61791198fb1271bb2552c9af7b33c933",
      ];

      const priceUpdateData = await connection.getPriceFeedsUpdateData(priceIds);
      
      const updateFee = ethers.utils.parseEther("0.01");

      const tx = await CFXPrice.getCFXPrice(priceUpdateData, {
        value: updateFee,
      });

      setTxHash(tx.hash);

      const receipt = await tx.wait();

      const [price, confidence] = await CFXPrice.callStatic.getCFXPrice(priceUpdateData, {
        value: updateFee,
      });

      setPrice(ethers.utils.formatUnits(price, 8));
    } catch (err) {
      console.error("Error occurred:", err);
      setError("An error occurred while fetching the price. Please try again.");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-100">
      <div className="bg-white p-8 rounded-lg shadow-md w-full max-w-md">
        <h1 className="text-2xl font-bold mb-6 text-center">CFX/USD Price Fetcher</h1>
        <button
          onClick={fetchCFXPrice}
          disabled={loading}
          className="w-full bg-blue-500 text-white py-2 px-4 rounded hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50 disabled:opacity-50 disabled:cursor-not-allowed"
        >
          {loading ? 'Fetching...' : 'Get CFX/USD Price'}
        </button>
        {error && (
          <p className="mt-4 text-red-500 text-center">{error}</p>
        )}
        {price && (
          <div className="mt-6">
            <p className="text-lg font-semibold text-center">CFX/USD Price: ${parseFloat(price).toFixed(4)}</p>
          </div>
        )}
        {txHash && (
          <div className="mt-4">
            <p className="text-sm text-gray-600 break-all">Transaction Hash: {txHash}</p>
          </div>
        )}
      </div>
    </div>
  );
}

