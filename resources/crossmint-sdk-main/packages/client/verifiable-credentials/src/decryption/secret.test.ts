import { VCSymmetricEncryptionService } from "./secret";

describe("VCSymmetricEncryptionService", () => {
    let service: VCSymmetricEncryptionService;

    beforeEach(() => {
        service = new VCSymmetricEncryptionService();
    });

    describe("decrypt", () => {
        it("should throw error if the data is malformed", async () => {
            const encrypted = {
                id: "testId",
                payload:
                    "89c7e4d8665f3f50794522b9c1263133b80c6db87b9b05fb91a946f6a79a815db4e78316c6c9c64c976c4ad2e8a8078fd2619a13c5bcaf1f92ae2a8ac54db98ed9",
            };
            const secret = "f45506ae4b8325a19c7059647e77c0f3194213020369f823f29d222101c1da1e";
            await expect(service.decrypt(encrypted, secret)).rejects.toThrow(
                new Error("Decrypted data is not a valid Verifiable Credential")
            );
        });

        it("should return decrypted data", async () => {
            const encrypted = {
                id: "urn:uuid:c00ffbfa-4dc3-4e22-8b24-ce2f720c7a58",
                payload:
                    "1499acd0eb2eb1fb695df30e584fad4901e08f36b9266f8e66bcfe5bdc3c24f1370f4d1704407b7695d95c1208f0d414c153c335f351b7e1a23ac277321bd4471b7b5d9293226c8b74d75e2e5372bb81a035b4bd75ba4e75bbe1356dbbeb8b6da0a4481573302bbdb9939a6acd68c31254a907751c453aafc97090be7048b282a042f793e6abc0a6084fd25a3e25b8a40c8f12983dddb0b6e31f071141ed89dc78bf2d829fb17681007cb47cf126daf9011cf08d66ac7bec6978c686578b97c54bf8af7c8fda399513b0744e3aaf7dd148fadd522269313863fe1daab504450c54e31a4462eb047223206abdcac6ce252d00d088121cfa348e001c392bc4d0a48ac78ae5bab233672622d0d50eaede987535ab82c564f3006b5d54839b34b9cc8ab202a22d88e5bcb9328ab1fb8ab7beded5267f2500b1e3c5d761d13abe4e40b4a8b4ae04e06ed779d6b61a2bcaf8992c568370119ed83498feec39633f21571b1ff6d8f3a1be4a9886bc03737192d15d103b62cf68ab2b8992437dd71e231e16f5bc5b4ae1646f968b775b2f0821cc098ad76bcf9a9d1e6f006073302a2e190c5573c754a96228ca26a1b122a6e0391e5ee408439ec5811acd06bd71c2e9c4e7b8a7072ebbfb62956a8f5cdcfbb475bc106a0c6a1c8a344a59767070f718a43673a8fe4f854ac601d811ce8532c9d0c6e8def674229e20b25c16a127609464e8dc3718b4aa8b5b5008fe9ede74e2085bb4ef4f17e3bffbf00e8512fe4efd5b0ef1fed195b4c81f870ff3e6ab1ff1f0b88787ab28957d54531b318f9544703196f843b573628cbc2dc7399de4ee3e177b3b1e30dbeee5d51a563d35d2ed66e0f38881272d425c2315abeb14d8a70abe2030207aeee3b72f3ee9d210084faf74f61f3d09d90dffa19c224dcae6c85b7c9404f388e6cd8954799a9bddf8dd554293a283dac2675db1d8c96c19f758fc9063b6339e642fce75139f87d75017ff7e9b72a9dd66fadaa1255530a7837a39c3fbb305c586159691217a2b894c48813bcc083d545c7ed80640392845e253d0c1a8f7f010237197f66c4837a2f3892997976c7cb296abb73234d0335a16d6b879468e1ffc29fd3d40ac9ad630efce50b3596a08e33de71971c06f7fc2b0b91002a37fe17e8ff0cbb82b418ced432f1a2406cdf0e6a26620442729c47945a6344eba2f7a2426749a1ea887064f60db0fdb41a0774f33a0aaa664023d2357b83068f869c2a3b6ea43738697feb344ea518a59a92e26097996183eea10a4ca863dc5adb30ab689fa38bba37c96df821a98958244f1cfe0d80a8830e3690860ebc815206a494a05254b469fcebd7c11e0eee842fa64c4c5eb5f577ca5d9d1e096bfdff0054821bf203352a2670b436a379b2b0c27abde488e8383660cb44fc7cb9f11413255c487bd1b7081cee02d95a7d70ad4a0d368dd080956eae0ffaa5ceb0e9fe205e1af6974b17eb91f877475f4c7fcd51aceaec452dd7d06d4acf696af90c4cf8497b9f2564798ddb0a64bc7cf765e06db2ad1484fb7607d3b99b8c6b4a5982262a678915e5d5716779e25d4b5e8c93f60f61bbcc163e41e01879612a98cdc6d72b993a68bff35075c5d5fdee1767621ee41e4afd00e96656c72683ae910d1112436a9d4a57c118809fde1fe2f93b178aa14e632feab33b3019b2f94b86eb3072da16b989f3a13faff3272a67595817b7fd4361479dbd0b6f3d7e961e394090d148d46660b8d9dd7aa81138df1c9549d00e1e509e5cba06fd76581815e77679e55d2b6fc1915298041682ca1fbc60f654050655e5afb75ecd640909c3fc2d53623f1c9dc9031271d1f8644d5c39141258247593fa37103ceca46894745740a2b7e1910520ccf0d359ef657fb557f19cdbd4c4d981ebb4c1a173e5756527e3ee9fe219191e6192c44ed17c436538f3dc063969f9a19d893c0d8b767fa962d797ea3779667ad67a41e4fe7c07c1508320e5d011f8e92ff944901d4fb989225872919336f27f7fe27caf4c4a76e174c9ba43a5526cf69b3c45ea20d4c62d49bc33e1188ddd309f80dcc4aa209c8fecb8f5230372fb7779f284ab036bd9be22f7c395c55972a5a70ecf22d567991ff7c157ced078c864d2d678b122e066a076d966ee4c33cdd8d1ad4cafbe764ba77925a5b85dec24d56f71676249ed7d4463905763f9c9fc804587be6d78287ae9a0ee93b775662413d",
            };
            const secret = "a5e85b4283b6bae1b45a6e6c5fd1c21f5cf322f0459d462ae5fd9158237245ab";
            const result = await service.decrypt(encrypted, secret);
            expect(result).toHaveProperty("credentialSubject");
        });
    });
});
